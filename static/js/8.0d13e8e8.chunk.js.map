{"version":3,"sources":["components/1atomic/MainBlock1Card/index.js","resources/utilities.js","components/1atomic/MainBlock3HeaderText/index.js","resources/constants.js","components/1atomic/Graphs/GraphEvolutionOfTreasuriesStacked.js","components/1atomic/Graphs/GraphTreasuryAllocationDonut.js","components/1atomic/Treasury1InvestmentItem/index.js","components/2modular/Treasury1InvestmentTable/index.js","components/1atomic/Graphs/GraphTotalValueDepositArea.js","components/1atomic/Graphs/GraphTreasurySPTRArea.js","components/1atomic/Graphs/GraphTreasuryBATONArea.js","components/1atomic/Graphs/GraphTreasuryRiskArea.js","components/2modular/Treasury2IndividualDetails/index.js","components/2modular/Treasury1InvestmentTable/newtable.js","components/4pages/TreasuriesPage/index.js"],"names":["BoxStyle","background","borderRadius","border","justifyContent","m","MainBlock1Card","props","sx","flexDirection","children","prettifytolocalstring","amount","toLocaleString","prettifyamounts","prettifyGrowthPercentage","direction","value","MainBlock3HeaderText","text","fontSize","fontWeight","mt","mb","API_URL","Disclaimer","GraphEvolutionOfTreasuriesStacked","minHeight","flexGrow","GraphTreasuryAllocationDonut","minWidth","Treasury1InvestmentItem","protocolName","protocolUrl","investmentAmount","date","expectedApy","transactionLink","color","href","isExternal","mx","Treasury1InvestmentTable","useState","chain","expectedAPY","investedAmount","protocolURL","investmentList","setInvestmentList","useEffect","axios","get","myConstants","then","res","data","getdata","variant","size","colorScheme","map","investment","GraphTotalValueDepositArea","GraphTreasurySPTRArea","GraphTreasuryBATONArea","GraphTreasuryRiskArea","tooltipselectedstyles","w","h","placement","hasArrow","arrowSize","bg","tooltipunselectedstyles","connect","state","stats","localwalletstats","tabIndex","setTabIndex","isLazy","onChange","index","_selected","isOpen","offset","label","p","pt","Newtable","useColorModeValue","bg2","bg3","_dark","alignItems","base","md","shadow","name","created","token","tid","spacingY","columns","textTransform","py","px","span","textAlign","textOverflow","overflow","whiteSpace","justify","spacing","TreasuriesPage"],"mappings":"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","file":"static/js/8.0d13e8e8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Flex } from \"@chakra-ui/react\";\r\n\r\nconst BoxStyle = {\r\n  background:\r\n    \"radial-gradient(90.16% 143.01% at 15.32% 21.04%, rgba(165, 239, 255, 0.2) 0%, rgba(110, 191, 244, 0.0447917) 77.08%, rgba(70, 144, 213, 0) 100%)\",\r\n  borderRadius: 5,\r\n  border: \"1px solid rgba(165, 239, 255, 0.2)\",\r\n  justifyContent: \"space-around\",\r\n  m: \"7px\",\r\n};\r\n\r\nconst MainBlock1Card = (props) => {\r\n  return (\r\n    <Flex sx={BoxStyle} flexDirection={[\"column\", \"column\", \"row\"]} {...props}>\r\n      {props.children}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default MainBlock1Card;\r\n","export function convertSlugToUrl(slug, parameters) {\r\n  let url = slug;\r\n  Object.entries(parameters).forEach(([key, value]) => {\r\n    url = url.replace(`:${key}`, value);\r\n  });\r\n  return url;\r\n}\r\n\r\nexport function prettifytolocalstring(amount) {\r\n  return amount ? amount.toLocaleString(): 'NULL';\r\n}\r\n\r\nexport function prettifyamounts(amount) {\r\n  return amount ? \"$\" + prettifytolocalstring(amount) : \"NULL\";\r\n}\r\n\r\nexport function prettifyGrowthPercentage(direction, value) {\r\n  if (direction === \"positive\") {\r\n    return \"+\" + value + \"%\";\r\n  } else if (direction === \"negative\") {\r\n    return \"-\" + value + \"%\";\r\n  } else {\r\n    return \"Nan\";\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Text } from \"@chakra-ui/react\";\r\n\r\nconst MainBlock3HeaderText = (props) => {\r\n  const { text } = props;\r\n  return (\r\n    <Text fontSize=\"26px\" fontWeight={700} m=\"7px\" mt=\"28px\" mb=\"28px\" {...props}>\r\n      {text}\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport default MainBlock3HeaderText;\r\n","export const API_URL = 'http://localhost:8448'\r\nexport const Disclaimer =\r\n  'When you sell SCEPTER, you have a maximum of 10 days vesting period with dynamic tax applied'\r\n\r\n/*\r\nimport * as myConstants from 'path/to/fileWithConstants';\r\n*/\r\n","import React from 'react'\r\n\r\nimport MainBlock1Card from '../MainBlock1Card'\r\n\r\nconst GraphEvolutionOfTreasuriesStacked = (props) => {\r\n  return (\r\n    <MainBlock1Card minHeight=\"345px\" flexGrow={1}>\r\n      Chart 1 evolution\r\n    </MainBlock1Card>\r\n  )\r\n}\r\n\r\nexport default GraphEvolutionOfTreasuriesStacked\r\n","import React from 'react'\r\n\r\nimport MainBlock1Card from '../MainBlock1Card'\r\n\r\nconst GraphTreasuryAllocationDonut = (props) => {\r\n  return (\r\n    <MainBlock1Card minHeight=\"345px\" minWidth={['320px', '356px', '356px']}>\r\n      Chart 2 donut\r\n    </MainBlock1Card>\r\n  )\r\n}\r\n\r\nexport default GraphTreasuryAllocationDonut\r\n","import React from \"react\";\r\n\r\nimport { Tr, Link, Td } from \"@chakra-ui/react\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { prettifyamounts } from \"resources/utilities\";\r\n\r\nconst Treasury1InvestmentItem = (props) => {\r\n  /* EXAMPLE */\r\n  /* \r\n        date: '12/08/2022',\r\n        chain: 'ONE',\r\n        expectedAPY: 150,\r\n        investedAmount: 49000,\r\n        protocolName: 'Hundred Finance',\r\n        protocolURL: 'https://hundred.finance/',\r\n        transactionLink: 'https://snowtrace.io/transaction/0x2984795872635885'   \r\n    */\r\n  const {\r\n    // chain,\r\n    protocolName,\r\n    protocolUrl,\r\n    investmentAmount,\r\n    date,\r\n    expectedApy,\r\n    transactionLink,\r\n  } = props;\r\n\r\n  return (\r\n    <Tr>\r\n      {/* <Td>{chain}</Td> */}\r\n      <Td>\r\n        <Link color=\"wandGreen\" href={protocolUrl} isExternal>\r\n          {protocolName}\r\n          <ExternalLinkIcon mx=\"5px\" mt=\"-5px\" />\r\n        </Link>\r\n      </Td>\r\n      <Td>{prettifyamounts(investmentAmount)}</Td>\r\n      <Td>{date}</Td>\r\n      <Td>{expectedApy}%</Td>\r\n      <Td>\r\n        <Link color=\"wandGreen\" href={transactionLink} isExternal>\r\n          View Transaction\r\n          <ExternalLinkIcon mx=\"5px\" mt=\"-5px\" />\r\n        </Link>\r\n      </Td>\r\n    </Tr>\r\n  )\r\n};\r\n\r\nexport default Treasury1InvestmentItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Text,\r\n  TableContainer,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport Treasury1InvestmentItem from \"components/1atomic/Treasury1InvestmentItem\";\r\n\r\nimport * as myConstants from \"resources/constants\";\r\nimport axios from \"axios\";\r\n\r\nconst Treasury1InvestmentTable = () => {\r\n  const [investmentList, setInvestmentList] = useState([\r\n    {\r\n      date: \"Updating...\",\r\n      chain: \"Updating...\",\r\n      expectedAPY: \"Updating...\",\r\n      investedAmount: \"Updating...\",\r\n      protocolName: \"Updating...\",\r\n      protocolURL: \"Updating...\",\r\n      transactionLink: \"https://snowtrace.io/\",\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    async function getdata() {\r\n      await axios\r\n        .get(`${myConstants.API_URL}/investment-list-data`)\r\n        .then((res) => {\r\n          setInvestmentList(res.data);\r\n        });\r\n    }\r\n    getdata();\r\n  }, []);\r\n\r\n  return (\r\n    <TableContainer>\r\n      <Table variant=\"simple\" size=\"md\" colorScheme=\"gray.400\">\r\n        <Thead>\r\n          <Tr>\r\n            {/* <Th>Chain</Th> */}\r\n            <Th>\r\n              <Text variant=\"investment-heading-text\">Protocol</Text>\r\n            </Th>\r\n            <Th>\r\n              <Text variant=\"investment-heading-text\">Investment</Text>\r\n            </Th>\r\n            <Th>\r\n              <Text variant=\"investment-heading-text\">Date</Text>\r\n            </Th>\r\n            <Th>\r\n              <Text variant=\"investment-heading-text\">Expected APY</Text>\r\n            </Th>\r\n            <Th>\r\n              <Text variant=\"investment-heading-text\">Transaction Details</Text>\r\n            </Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {investmentList.map((investment) => (\r\n            <Treasury1InvestmentItem\r\n              key={investment.date}\r\n              // chain={investment.chain}\r\n              protocolName={investment.protocolName}\r\n              protocolUrl={investment.protocolURL}\r\n              investmentAmount={investment.investedAmount}\r\n              date={investment.date}\r\n              expectedApy={investment.expectedAPY}\r\n              transactionLink={investment.transactionLink}\r\n            />\r\n          ))}\r\n        </Tbody>\r\n      </Table>\r\n    </TableContainer>\r\n  )\r\n};\r\n\r\nexport default Treasury1InvestmentTable;\r\n","import React from 'react'\r\n\r\nimport MainBlock1Card from '../MainBlock1Card'\r\n\r\nconst GraphTotalValueDepositArea = (props) => {\r\n\r\n  return (\r\n    <MainBlock1Card minHeight=\"345px\" minWidth={['320px', '356px', '356px']}>\r\n      Chart 2 tvl\r\n    </MainBlock1Card>\r\n  )\r\n}\r\n\r\nexport default GraphTotalValueDepositArea\r\n","import React from 'react'\r\n\r\nimport MainBlock1Card from '../MainBlock1Card'\r\n\r\nconst GraphTreasurySPTRArea = (props) => {\r\n  return (\r\n    <MainBlock1Card minHeight=\"345px\" flexGrow={1}>\r\n      Chart 1 sptr\r\n    </MainBlock1Card>\r\n  )\r\n}\r\n\r\nexport default GraphTreasurySPTRArea\r\n","import React from 'react'\r\n\r\nimport MainBlock1Card from '../MainBlock1Card'\r\n\r\nconst GraphTreasuryBATONArea = (props) => {\r\n  return (\r\n    <MainBlock1Card minHeight=\"345px\" flexGrow={1}>\r\n      Chart 1 baton\r\n    </MainBlock1Card>\r\n  )\r\n}\r\n\r\nexport default GraphTreasuryBATONArea\r\n","import React from 'react'\r\n\r\nimport MainBlock1Card from '../MainBlock1Card'\r\n\r\nconst GraphTreasuryRiskArea = (props) => {\r\n  return (\r\n    <MainBlock1Card minHeight=\"345px\" flexGrow={1}>\r\n      Chart 1 Risk\r\n    </MainBlock1Card>\r\n  )\r\n}\r\n\r\nexport default GraphTreasuryRiskArea\r\n","import React, { useState } from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Text,\r\n  Tooltip,\r\n  Flex\r\n} from '@chakra-ui/react'\r\n\r\nimport GraphTotalValueDepositArea from 'components/1atomic/Graphs/GraphTotalValueDepositArea'\r\nimport GraphTreasurySPTRArea from 'components/1atomic/Graphs/GraphTreasurySPTRArea'\r\nimport GraphTreasuryBATONArea from 'components/1atomic/Graphs/GraphTreasuryBATONArea'\r\nimport GraphTreasuryRiskArea from 'components/1atomic/Graphs/GraphTreasuryRiskArea'\r\n\r\nconst tooltipselectedstyles = {\r\n  w: '85px',\r\n  h: '5px',\r\n  placement: 'top',\r\n  hasArrow: true,\r\n  arrowSize: 7,\r\n  bg: 'wandGreen',\r\n}\r\n\r\nconst tooltipunselectedstyles = {\r\n  w: '85px',\r\n  h: '5px',\r\n  placement: 'top',\r\n  arrowSize: 7,\r\n  bg: '#B1AFCD',\r\n}\r\n\r\nconst Treasury2IndividualDetails = (props) => {\r\n  const { stats, investmentList, localwalletstats } = props\r\n  const [tabIndex, setTabIndex] = useState(0)\r\n\r\n  return (\r\n    <Tabs isLazy variant=\"unstyled\" onChange={(index) => setTabIndex(index)}>\r\n      <TabList>\r\n        <Tab _selected={{}}>\r\n          {tabIndex === 0 ? (\r\n            <Tooltip\r\n              {...tooltipselectedstyles}\r\n              isOpen={tabIndex === 0}\r\n              offset={[0, -38]}\r\n              label=\"&nbsp;\"\r\n            >\r\n              <Text variant=\"value\" color=\"white\" fontSize={18}>\r\n                SCEPTER\r\n              </Text>\r\n            </Tooltip>\r\n          ) : (\r\n            <Tooltip\r\n              {...tooltipunselectedstyles}\r\n              isOpen={tabIndex !== 0}\r\n              offset={[0, -38]}\r\n              label=\"&nbsp;\"\r\n            >\r\n              <Text variant=\"value\" color=\"#B1AFCD\" fontSize={18}>\r\n                SCEPTER\r\n              </Text>\r\n            </Tooltip>\r\n          )}\r\n        </Tab>\r\n        <Tab _selected={{}}>\r\n          {tabIndex === 1 ? (\r\n            <Tooltip\r\n              {...tooltipselectedstyles}\r\n              isOpen={tabIndex === 1}\r\n              offset={[0, -38]}\r\n              label=\"&nbsp;\"\r\n              w=\"70px\"\r\n            >\r\n              <Text variant=\"value\" color=\"white\" fontSize={18}>\r\n                BATON\r\n              </Text>\r\n            </Tooltip>\r\n          ) : (\r\n            <Tooltip\r\n              {...tooltipunselectedstyles}\r\n              isOpen={tabIndex !== 1}\r\n              offset={[0, -38]}\r\n              label=\"&nbsp;\"\r\n              w=\"70px\"\r\n            >\r\n              <Text variant=\"value\" color=\"#B1AFCD\" fontSize={18}>\r\n                BATON\r\n              </Text>\r\n            </Tooltip>\r\n          )}\r\n        </Tab>\r\n        <Tab _selected={{}}>\r\n          {tabIndex === 2 ? (\r\n            <Tooltip\r\n              {...tooltipselectedstyles}\r\n              isOpen={tabIndex === 2}\r\n              offset={[0, -38]}\r\n              label=\"&nbsp;\"\r\n              w=\"50px\"\r\n            >\r\n              <Text variant=\"value\" color=\"white\" fontSize={18}>\r\n                RISK\r\n              </Text>\r\n            </Tooltip>\r\n          ) : (\r\n            <Tooltip\r\n              {...tooltipunselectedstyles}\r\n              isOpen={tabIndex !== 2}\r\n              offset={[0, -38]}\r\n              label=\"&nbsp;\"\r\n              w=\"50px\"\r\n            >\r\n              <Text variant=\"value\" color=\"#B1AFCD\" fontSize={18}>\r\n                RISK\r\n              </Text>\r\n            </Tooltip>\r\n          )}\r\n        </Tab>\r\n      </TabList>\r\n      <TabPanels>\r\n        <TabPanel p=\"0\" pt=\"35px\">\r\n          <Flex flexDirection={['column', 'column', 'row']}>\r\n            <GraphTreasurySPTRArea />\r\n            <GraphTotalValueDepositArea />\r\n          </Flex>\r\n        </TabPanel>\r\n        <TabPanel p=\"0\" pt=\"35px\">\r\n          <Flex flexDirection={['column', 'column', 'row']}>\r\n            <GraphTreasuryBATONArea />\r\n            <GraphTotalValueDepositArea />\r\n          </Flex>\r\n        </TabPanel>\r\n        <TabPanel p=\"0\" pt=\"35px\">\r\n          <Flex flexDirection={['column', 'column', 'row']}>\r\n            <GraphTreasuryRiskArea />\r\n            <GraphTotalValueDepositArea />\r\n          </Flex>\r\n        </TabPanel>\r\n      </TabPanels>\r\n    </Tabs>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    stats: state.stats[0],\r\n    investmentList: state.investmentList[0],\r\n    localwalletstats: state.localwalletstats[0],\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(Treasury2IndividualDetails)\r\n","import React from 'react'\r\n\r\nimport {\r\n  useColorModeValue,\r\n  Flex,\r\n  Stack,\r\n  SimpleGrid,\r\n  Button,\r\n  IconButton,\r\n  ButtonGroup,\r\n  chakra,\r\n} from '@chakra-ui/react'\r\n\r\nconst Newtable = () => {\r\n  const data = [\r\n    {\r\n      name: 'Daggy',\r\n      created: '7 days ago',\r\n    },\r\n    {\r\n      name: 'Anubra',\r\n      created: '23 hours ago',\r\n    },\r\n    {\r\n      name: 'Josef',\r\n      created: 'A few seconds ago',\r\n    },\r\n    {\r\n      name: 'Sage',\r\n      created: 'A few hours ago',\r\n    },\r\n  ]\r\n\r\n  const bg = useColorModeValue('white', 'gray.800')\r\n  const bg2 = useColorModeValue('white', 'gray.800')\r\n  const bg3 = useColorModeValue('gray.100', 'gray.700')\r\n\r\n  return (<Flex\r\n      w=\"full\"\r\n      bg=\"#edf3f8\"\r\n      _dark={{\r\n        bg: \"#3e3e3e\",\r\n      }}\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Stack\r\n        direction={{\r\n          base: \"column\",\r\n        }}\r\n        w=\"full\"\r\n        bg={{\r\n          md: bg,\r\n        }}\r\n        shadow=\"lg\"\r\n      >\r\n        {data.map((token, tid) => {\r\n          return (\r\n            <Flex\r\n              direction={{\r\n                base: 'row',\r\n                md: 'column',\r\n              }}\r\n              bg={bg2}\r\n              key={tid}\r\n            >\r\n              <SimpleGrid\r\n                spacingY={3}\r\n                columns={{\r\n                  base: 1,\r\n                  md: 5,\r\n                }}\r\n                w={{\r\n                  base: 120,\r\n                  md: 'full',\r\n                }}\r\n                textTransform=\"uppercase\"\r\n                bg={bg3}\r\n                color={'gray.500'}\r\n                py={{\r\n                  base: 1,\r\n                  md: 4,\r\n                }}\r\n                px={{\r\n                  base: 2,\r\n                  md: 10,\r\n                }}\r\n                fontSize=\"md\"\r\n                fontWeight=\"hairline\"\r\n              >\r\n                <span>Name</span>\r\n                <span>Created</span>\r\n                <span>Data</span>\r\n                <span>Mehul</span>\r\n                <chakra.span\r\n                  textAlign={{\r\n                    md: 'right',\r\n                  }}\r\n                >\r\n                  Actions\r\n                </chakra.span>\r\n              </SimpleGrid>\r\n              <SimpleGrid\r\n                spacingY={3}\r\n                columns={{\r\n                  base: 1,\r\n                  md: 5,\r\n                }}\r\n                w=\"full\"\r\n                py={2}\r\n                px={10}\r\n                fontWeight=\"hairline\"\r\n              >\r\n                <chakra.span\r\n                  textOverflow=\"ellipsis\"\r\n                  overflow=\"hidden\"\r\n                  whiteSpace=\"nowrap\"\r\n                  color=\"black\"\r\n                >\r\n                  {token.name}\r\n                </chakra.span>\r\n                <chakra.span\r\n                  textOverflow=\"ellipsis\"\r\n                  overflow=\"hidden\"\r\n                  whiteSpace=\"nowrap\"\r\n                  color=\"black\"\r\n                >\r\n                  {token.created}\r\n                </chakra.span>\r\n                <Flex>\r\n                  <Button size=\"sm\" variant=\"solid\" colorScheme=\"purple\">\r\n                    View Profile\r\n                  </Button>\r\n                </Flex>\r\n                <Flex>\r\n                  <Button size=\"sm\" variant=\"solid\" colorScheme=\"purple\">\r\n                    View Mehul\r\n                  </Button>\r\n                </Flex>\r\n                <Flex\r\n                  justify={{\r\n                    md: 'end',\r\n                  }}\r\n                >\r\n                  <ButtonGroup variant=\"solid\" size=\"sm\" spacing={3}>\r\n                    <IconButton colorScheme=\"blue\" aria-label=\"Up\" />\r\n                    <IconButton colorScheme=\"green\" aria-label=\"Edit\" />\r\n                    <IconButton\r\n                      colorScheme=\"red\"\r\n                      variant=\"outline\"\r\n                      aria-label=\"Delete\"\r\n                    />\r\n                  </ButtonGroup>\r\n                </Flex>\r\n              </SimpleGrid>\r\n            </Flex>\r\n          )\r\n        })}\r\n      </Stack>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Newtable\r\n","import React, { useState } from 'react'\r\n\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Text,\r\n  Tooltip,\r\n} from '@chakra-ui/react'\r\n\r\nimport Treasury1InvestmentTable from 'components/2modular/Treasury1InvestmentTable'\r\n\r\nimport MainBlock1Card from 'components/1atomic/MainBlock1Card'\r\nimport MainBlock3HeaderText from 'components/1atomic/MainBlock3HeaderText'\r\nimport Treasury2IndividualDetails from 'components/2modular/Treasury2IndividualDetails'\r\nimport GraphEvolutionOfTreasuriesStacked from 'components/1atomic/Graphs/GraphEvolutionOfTreasuriesStacked'\r\nimport GraphTreasuryAllocationDonut from 'components/1atomic/Graphs/GraphTreasuryAllocationDonut'\r\n\r\nimport Newtable from 'components/2modular/Treasury1InvestmentTable/newtable'\r\n\r\nconst TreasuriesPage = () => {\r\n\r\n  return (\r\n    <>\r\n      <MainBlock3HeaderText text=\"Treasury Overview\" />\r\n      <Flex flexDirection={['column', 'column', 'row']}>\r\n        <GraphEvolutionOfTreasuriesStacked />\r\n        <GraphTreasuryAllocationDonut />\r\n      </Flex>\r\n      <MainBlock3HeaderText text=\"Individual Treasury Details\" />\r\n      <Treasury2IndividualDetails />\r\n\r\n      <MainBlock3HeaderText text=\"Treasury Investments\" />\r\n\r\n      <Treasury1InvestmentTable />\r\n\r\n      <Newtable />\r\n      <Box h=\"70px\" /* Only for spacing*/ />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TreasuriesPage\r\n"],"sourceRoot":""}