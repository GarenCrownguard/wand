Create the store -> store.js (Needs reducer and an initial state)
Wrap the react app so any component can access the store -> index.js (wrap the App with Provider and pass the store variable to it).
Configure the dev tools -> store composeWithDevTools so that it shows up on the chrome extension. Check the state in there.
Shift the reducer to a seperate file
	->make empty/temp state
	-> get types and payloads for each function. *


read data from redux store into components -> Start with List.js
	-> Lists.js gets the state from App.js
	-> Dispatch the action from App.js
	# https://stackoverflow.com/a/38678454
	-> Use connect to allow the re-render of components on store data change.

Connect the component from redux store.



=========================================
1. define the reducer. Need the following:
	1.1 The initialState: {
		posts :[]
		filteredposts: []
	}
	1.2 the stuff to do for each action.
	1.3 default return of the currentState
	
2. define the store.
	Just need to pass the reducer as it has all the data in it.

3. what actions can be performed and their params:
	3.1 watch all posts			-> no param, just return the current state
	3.2 add/ update the posts	-> if ID present - update (id, title, body) else add (userid, title, body)
	3.3 filter the posts		-> userID
	3.4 delete the posts		-> id

	Actions have the following format:
	{
		type: 'actionNamr',
		payload: {
			param: 'parameter goes here',
			description: 'value',
			id: 1
		}
	}

4. connect the app.js to store using connect keyword:

	const mapStateToProps = state => {
		return {
			posts: state.posts,
			filterposts: state.filteredposts
		}
	}

	export default connect(mapStateToProps)(App);